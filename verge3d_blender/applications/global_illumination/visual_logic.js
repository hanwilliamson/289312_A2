/**
 * Generated by Verge3D Puzzles v.3.7.0
 * Tue May 25 2021 21:14:52 GMT+0300 (Moscow Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var PROC = {
    
};

var sofa_icon, kichen_icon, wall_1_icon, wall_2_icon, material_wood_icon, floor_material_icon, markers_visible, kitchen_light, lightstand_light, dinner_zone_light, day;


// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// batchGeometry puzzle
function batchGeometry(objSelector) {
    var objNames = retrieveObjectNames(objSelector);
    var meshObjs = [];

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        obj.resolveMultiMaterial().forEach(function(objR) {
            if (objR.isMesh && objR.geometry)
                meshObjs.push(objR);
        });

    }

    if (meshObjs.length >= 2)
        v3d.BufferGeometryUtils.batchMeshes(meshObjs, appInstance.scene);

}



// createCSSRule puzzle
function createCSSRule(cssRule, cssRuleCont, isParent) {
    var style = document.createElement('style');
    style.type = 'text/css';
    style.innerHTML = cssRule + ' { ' + cssRuleCont + ' } ';

    var styles = (isParent) ? parent.document.getElementsByTagName('head')[0] :
                              document.getElementsByTagName('head')[0];
    styles.appendChild(style)
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId, isParent) {

    var win = isParent ? window.parent : window;

    var elem = win.document.createElement(elemType);
    if (id !== '')
        elem.id = id;

    var targetElem = getElement(targetId, isParent);
    if (targetElem instanceof win.Element) {
        switch (mode) {
            case 'TO':
                targetElem.appendChild(elem);
                break;
            case 'BEFORE':
                targetElem.insertAdjacentElement('beforebegin', elem);
                break;
            case 'AFTER':
                targetElem.insertAdjacentElement('afterend', elem);
                break;
        }
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// bindHTMLObject puzzle
function bindHTMLObject(objName, id, isParent) {
    if (!objName)
        return;
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var projected = new v3d.Vector3();
    elem.style.top = 0;
    elem.style.left = 0;
    function bindHTMLUpdateCb() {
        var camera = appInstance.getCamera(true);
        camera.updateMatrixWorld();
        obj.getWorldPosition(projected).project(camera);

        var isBehindCamera = false;
        var farNearCoeff = (camera.far + camera.near) / (camera.far - camera.near);
        if (camera.isPerspectiveCamera) {
            isBehindCamera = projected.z > farNearCoeff;
        } else if (camera.isOrthographicCamera) {
            isBehindCamera = projected.z < -farNearCoeff;
        }

        if (isBehindCamera) {
            // behind the camera, just move the element out of the sight
            projected.x = projected.y = -1e5;
        } else {
            projected.x = (0.5 + projected.x / 2) * appInstance.container.offsetWidth;
            projected.y = (0.5 - projected.y / 2) * appInstance.container.offsetHeight;
        }

        elem.style.transform = "translate(" + projected.x + "px, " + projected.y + "px)";
    }
    appInstance.renderCallbacks.push(bindHTMLUpdateCb);
    if (v3d.PL.editorRenderCallbacks)
        v3d.PL.editorRenderCallbacks.push([appInstance, bindHTMLUpdateCb]);
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}



// getEventProperty puzzle
function getEventProperty(prop, event) {
    if (typeof event != "undefined") {
        switch (prop) {
            case 'target.id':
                return event.target.id;
            case 'target.value':
                return event.target.value;
            case 'touches.length':
                return event.touches ? event.touches.length : 0;
            case 'touches[0].pageX':
                return event.touches[0].pageX;
            case 'touches[0].pageY':
                return event.touches[0].pageY;
            case 'touches[1].pageX':
                return event.touches[1].pageX;
            case 'touches[1].pageY':
                return event.touches[1].pageY;
            default:
                return event[prop];
        }
    }
}



// getHTMLElemStyle puzzle
function getHTMLElemStyle(prop, id, isParent) {
    var elem = getElement(id, isParent);

    // try explicitly set style first
    if (elem && elem.style && elem.style[prop]) {
        return elem.style[prop];
    } else if (elem) {
        var win = isParent ? window.parent : window;
        return win.getComputedStyle(elem)[prop];
    } else
        return '';
}



function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}



// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



// updateLightProbe puzzle
function updateLightProbe(objSelector) {

    var objNames = retrieveObjectNames(objSelector);
    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj || !obj.isCubeReflectionProbe) {
            return;
        }

        obj.update(appInstance.scene, appInstance.renderer);
    });

}



// setLightParam puzzle
function setLightParam(type, objSelector, param) {

    var objNames = retrieveObjectNames(objSelector);

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj || !obj.isLight)
            return;

        switch (type) {
        case 'COLOR_VECTOR':
            obj.color.r = param[0];
            obj.color.g = param[1];
            obj.color.b = param[2];
            break;
        case 'COLOR_CSS_HEX':
        case 'COLOR_CSS_RGB':
            var color = _pGlob.colorTmp.set(param);
            color.convertSRGBToLinear();
            obj.color.r = color.r;
            obj.color.g = color.g;
            obj.color.b = color.b;
            break;
        case 'INTENSITY':
            if (obj.userData.usePowerUnits)
                obj.power = param;
            else
                obj.intensity = param;
            break;
        }

    });

}



function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}


function subsequenceFromStartFromEnd(sequence, at1, at2) {
  var start = at1;
  var end = sequence.length - 1 - at2 + 1;
  return sequence.slice(start, end);
}


/**
 * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
 * If "collectSameNameMats" is true then all materials in the scene with the given name will
 * be used for collecting textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture
                || elem.constructor == v3d.DataTexture
                || elem.constructor == v3d.VideoTexture);
    });
}



/**
 * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
 */
function matReplaceEditableTexture(mat, oldTex, newTex) {

    switch (mat.type) {
        case 'MeshNodeMaterial':
            for (var name in mat.nodeTextures) {
                if (mat.nodeTextures[name] == oldTex) {
                    mat.nodeTextures[name] = newTex;
                }
            }

            break;

        case 'MeshStandardMaterial':

            var texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                            'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                            'metalnessMap', 'alphaMap', 'envMap'];

            texNames.forEach(function(name) {
                if (mat[name] == oldTex) {
                    mat[name] = newTex;
                }
            });

            break;

        default:
            console.error('matReplaceEditableTexture: Unsupported material type ' + mat.type);
            break;
    }

    // inherit some save params
    newTex.encoding = oldTex.encoding;
    newTex.wrapS = oldTex.wrapS;
    newTex.wrapT = oldTex.wrapT;

}



// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    var textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        var isHDR = (url.search(/\.hdr$/) > 0);

        if (!isHDR) {
            var loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            var loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(image) {
            // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
            var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;

            textures.forEach(function(elem) {

                if (!isHDR) {
                    elem.image = image;
                } else {
                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(image);

                    // NOTE: reset params since the texture may be converted to float
                    elem.type = v3d.UnsignedByteType;
                    elem.encoding = v3d.RGBEEncoding;

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;

                }

                elem.format = isJPEG ? v3d.RGBFormat : v3d.RGBAFormat;
                elem.needsUpdate = true;

                // update world material if it is using this texture
                if (appInstance.scene !== null && appInstance.scene.worldMaterial !== null) {
                    var wMat = appInstance.scene.worldMaterial;
                    for (var texName in wMat.nodeTextures) {
                        if (wMat.nodeTextures[texName] == elem) {
                            appInstance.updateEnvironment(wMat);
                        }
                    }
                }
            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        var videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        var videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            videoAssigned = true;
        });

        if (videoAssigned)
            doCb();

    }

    function processCanvas(elem) {
        var canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        var canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (v3d.PL) {
                v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
                v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}



bloom(2, 0.3, 0.5);

batchGeometry(['ALL_OBJECTS']);

createCSSRule('.painting_palette', ('position: absolute;' + '\n' +
'display: none;' + '\n' +
'background: white;' + '\n' +
'border-radius: 25px;' + '\n' +
'width: auto;' + '\n' +
'height: auto;' + '\n' +
'z-index: 2;' + '\n' +
'padding: 2.5px;'), false);
createCSSRule('.colors', ('position: static;' + '\n' +
'border-radius: 25px;' + '\n' +
'width: 30px;' + '\n' +
'height: 30px;' + '\n' +
'cursor: pointer;' + '\n' +
'margin: 2.5px;' + '\n' +
'float: left;'), false);
createCSSRule('.interraction_icon', ('position: absolute;' + '\n' +
'background-size: 60%;' + '\n' +
'background-color: white;' + '\n' +
'background-position: center;' + '\n' +
'background-repeat: no-repeat;' + '\n' +
'border-radius: 25px;' + '\n' +
'width: 40px;' + '\n' +
'height: 40px;' + '\n' +
'z-index: 2;' + '\n' +
'cursor: pointer;'), false);

addHTMLElement('div', 'cam_1', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'cam_1', false);
bindHTMLObject('cam_1', 'cam_1', false);
setHTMLElemStyle('left', '-20px', 'cam_1', false);
setHTMLElemStyle('top', '-20px', 'cam_1', false);
setHTMLElemStyle('backgroundColor', '#B5DFFF', 'cam_1', false);
setHTMLElemStyle('backgroundImage', 'url(icons/eye-regular.svg)', 'cam_1', false);
setHTMLElemStyle('display', 'none', 'cam_1', false);

sofa_icon = false;
addHTMLElement('div', 'sofa_paint_icon', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'sofa_paint_icon', false);
bindHTMLObject('sofa_paint_icon', 'sofa_paint_icon', false);
setHTMLElemStyle('left', '-20px', 'sofa_paint_icon', false);
setHTMLElemStyle('top', '-20px', 'sofa_paint_icon', false);
setHTMLElemStyle('backgroundImage', 'url(icons/paint-brush-solid.svg)', 'sofa_paint_icon', false);
addHTMLElement('div', 'sofa_palette', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'painting_palette', 'sofa_palette', false);
bindHTMLObject('sofa_paint_icon', 'sofa_palette', false);
setHTMLElemStyle('left', '30px', 'sofa_palette', false);
setHTMLElemStyle('top', '-20px', 'sofa_palette', false);
eventHTMLElem('click', 'sofa_paint_icon', false, function(event) {
  if (sofa_icon == false) {
    setHTMLElemStyle('display', 'block', 'sofa_palette', false);
    sofa_icon = true;
  } else {
    sofa_icon = false;
    setHTMLElemStyle('display', 'none', 'sofa_palette', false);
  }
});
addHTMLElement('div', 'color_1', 'TO', 'sofa_palette', false);
setHTMLElemAttribute('className', 'colors', 'color_1', false);
setHTMLElemStyle('backgroundColor', '#CFC7BA', 'color_1', false);
addHTMLElement('div', 'color_2', 'TO', 'sofa_palette', false);
setHTMLElemAttribute('className', 'colors', 'color_2', false);
setHTMLElemStyle('backgroundColor', '#667A61', 'color_2', false);
addHTMLElement('div', 'color_3', 'TO', 'sofa_palette', false);
setHTMLElemAttribute('className', 'colors', 'color_3', false);
setHTMLElemStyle('backgroundColor', '#5D707A', 'color_3', false);
addHTMLElement('div', 'color_4', 'TO', 'sofa_palette', false);
setHTMLElemAttribute('className', 'colors', 'color_4', false);
setHTMLElemStyle('backgroundColor', '#82616B', 'color_4', false);
addHTMLElement('div', 'color_5', 'TO', 'sofa_palette', false);
setHTMLElemAttribute('className', 'colors', 'color_5', false);
setHTMLElemStyle('backgroundColor', '#212121', 'color_5', false);

kichen_icon = false;
addHTMLElement('div', 'kitchen_front_paint_icon', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'kitchen_front_paint_icon', false);
bindHTMLObject('kitchen_front_paint_icon', 'kitchen_front_paint_icon', false);
setHTMLElemStyle('left', '-20px', 'kitchen_front_paint_icon', false);
setHTMLElemStyle('top', '-20px', 'kitchen_front_paint_icon', false);
setHTMLElemStyle('backgroundImage', 'url(icons/paint-brush-solid.svg)', 'kitchen_front_paint_icon', false);
addHTMLElement('div', 'kitchen_front_palette', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'painting_palette', 'kitchen_front_palette', false);
bindHTMLObject('kitchen_front_paint_icon', 'kitchen_front_palette', false);
setHTMLElemStyle('left', '30px', 'kitchen_front_palette', false);
setHTMLElemStyle('top', '-20px', 'kitchen_front_palette', false);
eventHTMLElem('click', 'kitchen_front_paint_icon', false, function(event) {
  if (kichen_icon == false) {
    setHTMLElemStyle('display', 'block', 'kitchen_front_palette', false);
    kichen_icon = true;
  } else {
    kichen_icon = false;
    setHTMLElemStyle('display', 'none', 'kitchen_front_palette', false);
  }
});
addHTMLElement('div', 'kitchen_color_1', 'TO', 'kitchen_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'kitchen_color_1', false);
setHTMLElemStyle('backgroundColor', '#7D7D7D', 'kitchen_color_1', false);
addHTMLElement('div', 'kitchen_color_2', 'TO', 'kitchen_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'kitchen_color_2', false);
setHTMLElemStyle('backgroundColor', '#D6D6D6', 'kitchen_color_2', false);
addHTMLElement('div', 'kitchen_color_3', 'TO', 'kitchen_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'kitchen_color_3', false);
setHTMLElemStyle('backgroundColor', '#1F1A17', 'kitchen_color_3', false);
addHTMLElement('div', 'kitchen_color_4', 'TO', 'kitchen_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'kitchen_color_4', false);
setHTMLElemStyle('backgroundColor', '#ABA48E', 'kitchen_color_4', false);
addHTMLElement('div', 'kitchen_color_5', 'TO', 'kitchen_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'kitchen_color_5', false);
setHTMLElemStyle('backgroundColor', '#9AABAB', 'kitchen_color_5', false);

addHTMLElement('div', 'kitchen_light', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'kitchen_light', false);
bindHTMLObject('kitchen_light_icon', 'kitchen_light', false);
setHTMLElemStyle('left', '-20px', 'kitchen_light', false);
setHTMLElemStyle('top', '-20px', 'kitchen_light', false);
setHTMLElemStyle('backgroundColor', '#ECF387', 'kitchen_light', false);
setHTMLElemStyle('backgroundImage', 'url(icons/bulb_off.svg)', 'kitchen_light', false);

wall_1_icon = false;
addHTMLElement('div', 'wall_1_paint_icon', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'wall_1_paint_icon', false);
bindHTMLObject('wall_1_paint_icon', 'wall_1_paint_icon', false);
setHTMLElemStyle('left', '-20px', 'wall_1_paint_icon', false);
setHTMLElemStyle('top', '-20px', 'wall_1_paint_icon', false);
setHTMLElemStyle('backgroundImage', 'url(icons/paint-brush-solid.svg)', 'wall_1_paint_icon', false);
addHTMLElement('div', 'wall_1_front_palette', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'painting_palette', 'wall_1_front_palette', false);
bindHTMLObject('wall_1_paint_icon', 'wall_1_front_palette', false);
setHTMLElemStyle('left', '30px', 'wall_1_front_palette', false);
setHTMLElemStyle('top', '-20px', 'wall_1_front_palette', false);
eventHTMLElem('click', 'wall_1_paint_icon', false, function(event) {
  if (wall_1_icon == false) {
    setHTMLElemStyle('display', 'block', 'wall_1_front_palette', false);
    wall_1_icon = true;
  } else {
    wall_1_icon = false;
    setHTMLElemStyle('display', 'none', 'wall_1_front_palette', false);
  }
});
addHTMLElement('div', 'wall_1_color_1', 'TO', 'wall_1_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_1_color_1', false);
setHTMLElemStyle('backgroundColor', '#D9D9D9', 'wall_1_color_1', false);
addHTMLElement('div', 'wall_1_color_2', 'TO', 'wall_1_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_1_color_2', false);
setHTMLElemStyle('backgroundColor', '#D97643', 'wall_1_color_2', false);
addHTMLElement('div', 'wall_1_color_3', 'TO', 'wall_1_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_1_color_3', false);
setHTMLElemStyle('backgroundColor', '#6A6A78', 'wall_1_color_3', false);
addHTMLElement('div', 'wall_1_color_4', 'TO', 'wall_1_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_1_color_4', false);
setHTMLElemStyle('backgroundColor', '#1C1915', 'wall_1_color_4', false);
addHTMLElement('div', 'wall_1_color_5', 'TO', 'wall_1_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_1_color_5', false);
setHTMLElemStyle('backgroundColor', '#853C5D', 'wall_1_color_5', false);

wall_2_icon = false;
addHTMLElement('div', 'wall_2_paint_icon', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'wall_2_paint_icon', false);
bindHTMLObject('wall_2_paint_icon', 'wall_2_paint_icon', false);
setHTMLElemStyle('left', '-20px', 'wall_2_paint_icon', false);
setHTMLElemStyle('top', '-20px', 'wall_2_paint_icon', false);
setHTMLElemStyle('backgroundImage', 'url(icons/paint-brush-solid.svg)', 'wall_2_paint_icon', false);
addHTMLElement('div', 'wall_2_front_palette', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'painting_palette', 'wall_2_front_palette', false);
bindHTMLObject('wall_2_paint_icon', 'wall_2_front_palette', false);
setHTMLElemStyle('left', '30px', 'wall_2_front_palette', false);
setHTMLElemStyle('top', '-20px', 'wall_2_front_palette', false);
eventHTMLElem('click', 'wall_2_paint_icon', false, function(event) {
  if (wall_2_icon == false) {
    setHTMLElemStyle('display', 'block', 'wall_2_front_palette', false);
    wall_2_icon = true;
  } else {
    wall_2_icon = false;
    setHTMLElemStyle('display', 'none', 'wall_2_front_palette', false);
  }
});
addHTMLElement('div', 'wall_2_color_1', 'TO', 'wall_2_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_2_color_1', false);
setHTMLElemStyle('backgroundColor', '#292926', 'wall_2_color_1', false);
addHTMLElement('div', 'wall_2_color_2', 'TO', 'wall_2_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_2_color_2', false);
setHTMLElemStyle('backgroundColor', '#9E8E44', 'wall_2_color_2', false);
addHTMLElement('div', 'wall_2_color_3', 'TO', 'wall_2_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_2_color_3', false);
setHTMLElemStyle('backgroundColor', '#63996A', 'wall_2_color_3', false);
addHTMLElement('div', 'wall_2_color_4', 'TO', 'wall_2_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_2_color_4', false);
setHTMLElemStyle('backgroundColor', '#5D7E99', 'wall_2_color_4', false);
addHTMLElement('div', 'wall_2_color_5', 'TO', 'wall_2_front_palette', false);
setHTMLElemAttribute('className', 'colors', 'wall_2_color_5', false);
setHTMLElemStyle('backgroundColor', '#D9D9D9', 'wall_2_color_5', false);

material_wood_icon = false;
addHTMLElement('div', 'material_icon', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'material_icon', false);
bindHTMLObject('wood_material_icon', 'material_icon', false);
setHTMLElemStyle('left', '-20px', 'material_icon', false);
setHTMLElemStyle('top', '-20px', 'material_icon', false);
setHTMLElemStyle('backgroundImage', 'url(icons/adjust-solid.svg)', 'material_icon', false);
addHTMLElement('div', 'material_palette', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'painting_palette', 'material_palette', false);
bindHTMLObject('wood_material_icon', 'material_palette', false);
setHTMLElemStyle('left', '30px', 'material_palette', false);
setHTMLElemStyle('top', '-20px', 'material_palette', false);
eventHTMLElem('click', 'material_icon', false, function(event) {
  if (material_wood_icon == false) {
    setHTMLElemStyle('display', 'block', 'material_palette', false);
    material_wood_icon = true;
  } else {
    material_wood_icon = false;
    setHTMLElemStyle('display', 'none', 'material_palette', false);
  }
});
addHTMLElement('div', 'wood_mat_1', 'TO', 'material_palette', false);
setHTMLElemAttribute('className', 'colors', 'wood_mat_1', false);
setHTMLElemStyle('backgroundImage', 'url(\'dark_wood_basecolor_1.jpg\')', 'wood_mat_1', false);
addHTMLElement('div', 'wood_mat_2', 'TO', 'material_palette', false);
setHTMLElemAttribute('className', 'colors', 'wood_mat_2', false);
setHTMLElemStyle('backgroundImage', 'url(\'dark_wood_basecolor_2.jpg\')', 'wood_mat_2', false);
addHTMLElement('div', 'wood_mat_3', 'TO', 'material_palette', false);
setHTMLElemAttribute('className', 'colors', 'wood_mat_3', false);
setHTMLElemStyle('backgroundImage', 'url(\'dark_wood_basecolor_3.jpg\')', 'wood_mat_3', false);

floor_material_icon = false;
addHTMLElement('div', 'floor_material_icon', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'floor_material_icon', false);
bindHTMLObject('floor_material_icon', 'floor_material_icon', false);
setHTMLElemStyle('left', '-20px', 'floor_material_icon', false);
setHTMLElemStyle('top', '-20px', 'floor_material_icon', false);
setHTMLElemStyle('backgroundImage', 'url(icons/adjust-solid.svg)', 'floor_material_icon', false);
addHTMLElement('div', 'floor_material_palette', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'painting_palette', 'floor_material_palette', false);
bindHTMLObject('floor_material_icon', 'floor_material_palette', false);
setHTMLElemStyle('left', '30px', 'floor_material_palette', false);
setHTMLElemStyle('top', '-20px', 'floor_material_palette', false);
eventHTMLElem('click', 'floor_material_icon', false, function(event) {
  if (floor_material_icon == false) {
    setHTMLElemStyle('display', 'block', 'floor_material_palette', false);
    floor_material_icon = true;
  } else {
    floor_material_icon = false;
    setHTMLElemStyle('display', 'none', 'floor_material_palette', false);
  }
});
addHTMLElement('div', 'floor_wood_mat_1', 'TO', 'floor_material_palette', false);
setHTMLElemAttribute('className', 'colors', 'floor_wood_mat_1', false);
setHTMLElemStyle('backgroundImage', 'url(\'floor_basecolor_1.jpg\')', 'floor_wood_mat_1', false);
addHTMLElement('div', 'floor_wood_mat_2', 'TO', 'floor_material_palette', false);
setHTMLElemAttribute('className', 'colors', 'floor_wood_mat_2', false);
setHTMLElemStyle('backgroundImage', 'url(\'floor_basecolor_2.jpg\')', 'floor_wood_mat_2', false);
addHTMLElement('div', 'floor_wood_mat_3', 'TO', 'floor_material_palette', false);
setHTMLElemAttribute('className', 'colors', 'floor_wood_mat_3', false);
setHTMLElemStyle('backgroundImage', 'url(\'floor_basecolor_3.jpg\')', 'floor_wood_mat_3', false);

addHTMLElement('div', 'cam_2', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'cam_2', false);
bindHTMLObject('cam_2', 'cam_2', false);
setHTMLElemStyle('left', '-20px', 'cam_2', false);
setHTMLElemStyle('top', '-20px', 'cam_2', false);
setHTMLElemStyle('backgroundColor', '#B5DFFF', 'cam_2', false);
setHTMLElemStyle('backgroundImage', 'url(icons/eye-regular.svg)', 'cam_2', false);

addHTMLElement('div', 'lightstand_light', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'lightstand_light', false);
bindHTMLObject('lightstand_light_icon', 'lightstand_light', false);
setHTMLElemStyle('left', '-20px', 'lightstand_light', false);
setHTMLElemStyle('top', '-20px', 'lightstand_light', false);
setHTMLElemStyle('backgroundColor', '#ECF387', 'lightstand_light', false);
setHTMLElemStyle('backgroundImage', 'url(icons/bulb_off.svg)', 'lightstand_light', false);

createCSSRule('.markers_hide_show', ('position: absolute;' + '\n' +
'top: 5px;' + '\n' +
'right: 60px;' + '\n' +
'width: 50px;' + '\n' +
'height: 50px;' + '\n' +
'cursor: pointer;' + '\n' +
'background-size: 100% 100%;' + '\n' +
'z-index: 3;'), false);

addHTMLElement('div', 'cam_3', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'cam_3', false);
bindHTMLObject('cam_3', 'cam_3', false);
setHTMLElemStyle('left', '-20px', 'cam_3', false);
setHTMLElemStyle('top', '-20px', 'cam_3', false);
setHTMLElemStyle('backgroundColor', '#B5DFFF', 'cam_3', false);
setHTMLElemStyle('backgroundImage', 'url(icons/eye-regular.svg)', 'cam_3', false);

addHTMLElement('div', 'dinner_zone_light', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'dinner_zone_light', false);
bindHTMLObject('dinner_zone_light_icon', 'dinner_zone_light', false);
setHTMLElemStyle('left', '-20px', 'dinner_zone_light', false);
setHTMLElemStyle('top', '-20px', 'dinner_zone_light', false);
setHTMLElemStyle('backgroundColor', '#ECF387', 'dinner_zone_light', false);
setHTMLElemStyle('backgroundImage', 'url(icons/bulb_off.svg)', 'dinner_zone_light', false);

markers_visible = true;
addHTMLElement('div', 'markers_hide_show', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'markers_hide_show', 'markers_hide_show', false);
setHTMLElemStyle('backgroundImage', 'url(icons/markers_visible.svg)', 'markers_hide_show', false);

addHTMLElement('div', 'cam_4', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'cam_4', false);
bindHTMLObject('cam_4', 'cam_4', false);
setHTMLElemStyle('left', '-20px', 'cam_4', false);
setHTMLElemStyle('top', '-20px', 'cam_4', false);
setHTMLElemStyle('backgroundColor', '#B5DFFF', 'cam_4', false);
setHTMLElemStyle('backgroundImage', 'url(icons/eye-regular.svg)', 'cam_4', false);

eventHTMLElem('click', 'markers_hide_show', false, function(event) {
  if (markers_visible == true) {
    setCSSRuleStyle('visibility', 'hidden', '.interraction_icon', false, '');
    setCSSRuleStyle('visibility', 'hidden', '.painting_palette', false, '');
    markers_visible = false;
    setHTMLElemStyle('backgroundImage', 'url(icons/markers_hidden.svg)', 'markers_hide_show', false);
  } else {
    setCSSRuleStyle('visibility', 'visible', '.interraction_icon', false, '');
    setCSSRuleStyle('visibility', 'visible', '.painting_palette', false, '');
    markers_visible = true;
    setHTMLElemStyle('backgroundImage', 'url(icons/markers_visible.svg)', 'markers_hide_show', false);
  }
});

addHTMLElement('div', 'day_night_switcher', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interraction_icon', 'day_night_switcher', false);
bindHTMLObject('day_night_icon', 'day_night_switcher', false);
setHTMLElemStyle('left', '-20px', 'day_night_switcher', false);
setHTMLElemStyle('top', '-20px', 'day_night_switcher', false);
setHTMLElemStyle('backgroundColor', '#ECF387', 'day_night_switcher', false);
setHTMLElemStyle('backgroundImage', 'url(icons/sun-solid.svg)', 'day_night_switcher', false);

eventHTMLElem('click', ['color_1', 'color_2', 'color_3', 'color_4', 'color_5'], false, function(event) {
  setMaterialColor('textile', 'RGB', 0, 0, 0, getHTMLElemStyle('backgroundColor', getEventProperty('target.id', event), false));
  updateLightProbe('ReflectionCubemap');
});
eventHTMLElem('click', ['kitchen_color_1', 'kitchen_color_2', 'kitchen_color_3', 'kitchen_color_4', 'kitchen_color_5'], false, function(event) {
  setMaterialColor('kitchen_front', 'RGB', 0, 0, 0, getHTMLElemStyle('backgroundColor', getEventProperty('target.id', event), false));
  updateLightProbe('ReflectionCubemap');
});
eventHTMLElem('click', ['wall_1_color_1', 'wall_1_color_2', 'wall_1_color_3', 'wall_1_color_4', 'wall_1_color_5'], false, function(event) {
  setMaterialColor('walls_1', 'RGB', 0, 0, 0, getHTMLElemStyle('backgroundColor', getEventProperty('target.id', event), false));
  updateLightProbe('ReflectionCubemap');
  updateLightProbe('ReflectionCubemap.001');
});
eventHTMLElem('click', ['wall_2_color_1', 'wall_2_color_2', 'wall_2_color_3', 'wall_2_color_4', 'wall_2_color_5'], false, function(event) {
  setMaterialColor('walls_2', 'RGB', 0, 0, 0, getHTMLElemStyle('backgroundColor', getEventProperty('target.id', event), false));
  updateLightProbe('ReflectionCubemap');
});

kitchen_light = false;
eventHTMLElem('click', 'kitchen_light', false, function(event) {
  if (kitchen_light == false) {
    setLightParam('INTENSITY', 'kitchen_light', 25);
    setMaterialValue('kitchen_lamps', 'Value', 5);
    kitchen_light = true;
    setHTMLElemStyle('backgroundImage', 'url(icons/bulb_on.svg)', 'kitchen_light', false);
    updateLightProbe('ReflectionCubemap.001');
  } else {
    setLightParam('INTENSITY', 'kitchen_light', 0);
    setMaterialValue('kitchen_lamps', 'Value', 0);
    kitchen_light = false;
    setHTMLElemStyle('backgroundImage', 'url(icons/bulb_off.svg)', 'kitchen_light', false);
    updateLightProbe('ReflectionCubemap.001');
  }
});

lightstand_light = false;
eventHTMLElem('click', 'lightstand_light', false, function(event) {
  if (lightstand_light == false) {
    setLightParam('INTENSITY', 'lightstand_light', 20);
    setMaterialValue('lightstand', 'Value', 10);
    lightstand_light = true;
    setHTMLElemStyle('backgroundImage', 'url(icons/bulb_on.svg)', 'lightstand_light', false);
    updateLightProbe('ReflectionCubemap');
  } else {
    setLightParam('INTENSITY', 'lightstand_light', 0);
    setMaterialValue('lightstand', 'Value', 0);
    lightstand_light = false;
    setHTMLElemStyle('backgroundImage', 'url(icons/bulb_off.svg)', 'lightstand_light', false);
    updateLightProbe('ReflectionCubemap');
  }
});

eventHTMLElem('click', ['wood_mat_1', 'wood_mat_2', 'wood_mat_3'], false, function(event) {
  replaceTexture('big_table_wood', 'dark_wood_basecolor_1', subsequenceFromStartFromEnd(getHTMLElemStyle('backgroundImage', getEventProperty('target.id', event), false), 5, 2), function() {});
  updateLightProbe('ReflectionCubemap');
});

dinner_zone_light = false;
eventHTMLElem('click', 'dinner_zone_light', false, function(event) {
  if (dinner_zone_light == false) {
    setLightParam('INTENSITY', 'dinner_zone_light', 200);
    setMaterialValue('dinner_zone_light_wood', 'Value', 1.5);
    setMaterialValue('dinner_zone_light_wood', 'Value', 5);
    dinner_zone_light = true;
    setHTMLElemStyle('backgroundImage', 'url(icons/bulb_on.svg)', 'lightstand_light', false);
    updateLightProbe('ReflectionCubemap');
  } else {
    setLightParam('INTENSITY', 'dinner_zone_light', 0);
    setMaterialValue('dinner_zone_light_wood', 'Value', 0);
    setMaterialValue('dinner_zone_light_wood', 'Value', 0);
    dinner_zone_light = false;
    setHTMLElemStyle('backgroundImage', 'url(icons/bulb_off.svg)', 'lightstand_light', false);
    updateLightProbe('ReflectionCubemap');
  }
});

eventHTMLElem('click', ['floor_wood_mat_1', 'floor_wood_mat_2', 'floor_wood_mat_3'], false, function(event) {
  replaceTexture('floor', 'floor_basecolor_1', subsequenceFromStartFromEnd(getHTMLElemStyle('backgroundImage', getEventProperty('target.id', event), false), 5, 2), function() {});
  updateLightProbe('ReflectionCubemap');
});

day = true;
eventHTMLElem('click', 'day_night_switcher', false, function(event) {
  if (day == true) {
    setLightParam('INTENSITY', 'Sun', 0.1);
    setMaterialValue('env', 'emit', 0.05);
    setMaterialValue('env', 'color', 0.4);
    setMaterialValue('Verge3D_Environment_World', 'Value', 0.05);
    day = false;
    setHTMLElemStyle('backgroundImage', 'url(icons/moon-solid.svg)', 'day_night_switcher', false);
    updateLightProbe('ReflectionCubemap');
    updateLightProbe('ReflectionCubemap.001');
  } else {
    setLightParam('INTENSITY', 'Sun', 8);
    setMaterialValue('env', 'emit', 1.5);
    setMaterialValue('env', 'color', 0);
    setMaterialValue('Verge3D_Environment_World', 'Value', 0.6);
    day = true;
    setHTMLElemStyle('backgroundImage', 'url(icons/sun-solid.svg)', 'day_night_switcher', false);
    updateLightProbe('ReflectionCubemap');
    updateLightProbe('ReflectionCubemap.001');
  }
});

eventHTMLElem('click', 'cam_1', false, function(event) {
  tweenCamera('cam_1', 'cam_1_look_at', 2, function() {}, 1);
  setHTMLElemStyle('display', 'none', 'cam_1', false);
  setHTMLElemStyle('display', 'block', ['cam_2', 'cam_3', 'cam_4'], false);
});

eventHTMLElem('click', 'cam_2', false, function(event) {
  tweenCamera('cam_2', 'cam_2_look_at', 2, function() {}, 1);
  setHTMLElemStyle('display', 'none', 'cam_2', false);
  setHTMLElemStyle('display', 'block', ['cam_1', 'cam_3', 'cam_4'], false);
});

eventHTMLElem('click', 'cam_3', false, function(event) {
  tweenCamera('cam_3', 'cam_3_look_at', 2, function() {}, 1);
  setHTMLElemStyle('display', 'none', 'cam_3', false);
  setHTMLElemStyle('display', 'block', ['cam_1', 'cam_2', 'cam_4'], false);
});

eventHTMLElem('click', 'cam_4', false, function(event) {
  tweenCamera('cam_4', 'cam_4_look_at', 2, function() {}, 1);
  setHTMLElemStyle('display', 'none', 'cam_4', false);
  setHTMLElemStyle('display', 'block', ['cam_1', 'cam_2', 'cam_3'], false);
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
